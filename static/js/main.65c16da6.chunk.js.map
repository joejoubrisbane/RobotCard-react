{"version":3,"sources":["components/layout/NavBar/robot.png","store.js","containers/CreateRobot/index.js","components/Card/card.js","components/CardList/index.js","components/SearchBox/index.js","components/Scroll/index.js","containers/DisplayRobot/index.js","components/layout/NavBar/NavBarMoblie.js","components/layout/NavBar/NavBarChildren.js","components/layout/NavBar/NavBarDesktop.js","components/layout/NavBar/index.js","containers/Landing/index.js","containers/editRobot/index.js","components/auth/Login/Login.js","helpers/auth.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","store","compose","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestoreReducer","window","__REDUX_DEVTOOLS_EXTENSION__","CreateRobot","onSubmit","values","newRobot","_this$props","_this","props","history","add","collection","then","push","react_default","a","createElement","Responsive","Segment","react_final_form_es","this","initialValues","render","_ref","handleSubmit","form","submitting","pristine","className","Card_Card","fluid","Header","Content","undefined","robotId","Placeholder","Image","rectangular","alt","src","concat","name","_ref2","input","meta","build","Object","assign","color","settings","start","min","max","step","onChange","value","component","type","placeholder","disabled","onClick","reset","JSON","stringify","Component","firestoreConnect","Card","id","email","notes","Modal","closeIcon","trigger","image","wrapped","size","Description","Link","to","Button","delete","doc","console","log","negative","CardList","robots","cardComponent","_","map","robot","card","key","SearchBox","searchfield","searchChange","Scroll","style","overflow","border","height","children","DisplayRobot","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDeleteRobot","onSearchChange","event","setState","target","state","_this2","clients","clientNames","client","objectSpread","firstName","lastName","filteredRobots","filter","toLower","includes","components_SearchBox","components_Scroll","components_CardList","Loader","active","connect","ordered","NavBarMobile","isLogin","onPusherClick","onToggle","visible","onLogoutClick","Sidebar","Pushable","as","Menu","animation","icon","inverted","direction","vertical","Item","NavLink","Pusher","dimmed","fixed","minHeight","position","Icon","NavBarChildren","Container","marginTop","NavBarDesktop","NavBar","isAuthenticated","handlePusher","logout","handleToggle","_this$state","onlyMobile","NavBarMoblie_NavBarMobile","NavBarChildren_NavBarChildren","minWidth","onlyTablet","NavBar_NavBarDesktop","auth","uid","withRouter","firebaseConnect","Landing","editRobot","updatedRobot","update","storeAs","match","params","_ref3","Login","password","login","locationHelper","locationHelperBuilder","UserIsAuthenticated","connectedRouterRedirect","wrapperDisplayName","AuthenticatingComponent","allowRedirectBack","redirectPath","ownProps","getRedirectQueryParam","authenticatingSelector","_ref$firebase","isInitializing","profile","isLoaded","authenticatedSelector","isEmpty","UserIsNotAuthenticated","_ref3$firebase","_ref4","App","react_redux_es","BrowserRouter","layout_NavBar","Switch","Route","exact","path","Boolean","location","hostname","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qUCyBxCC,IAASC,cAjBc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,wCAYOR,IAASS,YAA3B,IA0CeC,EAtCiBC,YAC5BC,6BAAmBZ,IAbL,CACda,YAAa,QACbC,wBAAwB,IAYxBC,yBAAef,KAFaW,CAG9BK,IA0BYC,CAxBMC,YAAgB,CAChClB,SAAUmB,kBACVV,UAAWW,qBAmBM,GAMjBT,YACIC,6BAAmBZ,KACnBqB,OAAOC,8BAAgCD,OAAOC,8FC3DhDC,6MAEFC,SAAW,SAAAC,GACP,IAAMC,EAAWD,EADAE,EAEYC,EAAKC,MAA1BpB,EAFSkB,EAETlB,UAAUqB,EAFDH,EAECG,QAClBrB,EAAUsB,IAAI,CAACC,WAAW,WAAWN,GAAUO,KAAKH,EAAQI,KAAK,yFAGrE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAEEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEhB,SAAUiB,KAAKjB,SACfkB,cAAe,GACfC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,KAAMC,EAAvBH,EAAuBG,WAAYC,EAAnCJ,EAAmCI,SAAUvB,EAA7CmB,EAA6CnB,OAA7C,OACNU,EAAAC,EAAAC,cAAA,QAAMY,UAAU,UAAUzB,SAAUqB,GAClCV,EAAAC,EAAAC,cAAA,OAAKY,UAAU,UACXd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,kBACXd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,OAAK,GACPhB,EAAAC,EAAAC,cAACa,EAAA,EAAKE,OAAN,KACIjB,EAAAC,EAAAC,cAAA,6BAEJF,EAAAC,EAAAC,cAACa,EAAA,EAAKG,QAAN,UAG6BC,GAAjB7B,EAAO8B,QAAqBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaL,OAAK,GAAlB,IAAoBhB,EAAAC,EAAAC,cAACmB,EAAA,EAAYC,MAAb,CAAmBC,aAAW,IAAlD,KAAqEvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,SAASC,IAAG,wBAAAC,OAA0BpC,EAAO8B,QAAjC,iBAQ5IpB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,mBACXd,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOsB,KAAK,WACP,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAHD,EAAUE,KAAV,OAEO9B,EAAAC,EAAAC,cAAC6B,EAAA,OAADC,OAAAC,OAAA,GACYJ,EADZ,CAGQK,MAAM,MACNC,SAAU,CACNC,MAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNC,SAAS,SAAAC,GAAUZ,EAAMW,SAASC,UAQ5DzC,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEsB,KAAK,YACLe,UAAU,QACVC,KAAK,OACLC,YAAY,eAGd5C,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEsB,KAAK,WACLe,UAAU,QACVC,KAAK,OACLC,YAAY,cAGZ5C,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,QACLe,UAAU,QACVC,KAAK,OACLC,YAAY,gBAOtB5C,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SACbd,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEsB,KAAK,QACLe,UAAU,WACVE,YAAY,WAGhB5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQY,UAAU,2BAA2B6B,KAAK,SAASE,SAAUjC,GAAcC,GAAnF,UAGAb,EAAAC,EAAAC,cAAA,UACIY,UAAU,4BACZgC,QAASnC,EAAKoC,MACdF,SAAUjC,GAAcC,GAH1B,UAQFb,EAAAC,EAAAC,cAAA,WAAM8C,KAAKC,UAAU3D,EAAQ,EAAG,iBAzGtB4D,aAuHXC,+BAAmB/D,yDCrFnBgE,EArCF,SAAA3C,GAA2D,IAAzDW,EAAyDX,EAAzDW,QAAUiC,EAA+C5C,EAA/C4C,GAAK1B,EAA0ClB,EAA1CkB,KAAM2B,EAAoC7C,EAApC6C,MAAOC,EAA6B9C,EAA7B8C,MAAOjF,EAAsBmC,EAAtBnC,UAAUqB,EAAYc,EAAZd,aAE1CwB,GAAXC,IACCA,EAAUiC,GAMd,OAEIrD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACIC,WAAS,EACTC,QACA1D,EAAAC,EAAAC,cAAA,OAAKY,UAAU,uDACVd,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,SAASC,IAAG,wBAAAC,OAA0BN,EAA1B,cACnBpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKyB,GACJ3B,EAAAC,EAAAC,cAAA,SAAIoD,GACLtD,EAAAC,EAAAC,cAAA,SAAIqD,MAG3BvD,EAAAC,EAAAC,cAACsD,EAAA,EAAMvC,OAAP,sBACIjB,EAAAC,EAAAC,cAACsD,EAAA,EAAMtC,QAAP,CAAeyC,OAAK,GAChB3D,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOsC,SAAO,EAACC,KAAK,SAASpC,IAAG,wBAAAC,OAA0BN,EAA1B,cAChCpB,EAAAC,EAAAC,cAACsD,EAAA,EAAMM,YAAP,KACI9D,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAASU,GACT3B,EAAAC,EAAAC,cAAA,0FACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,SAAIqD,GACJvD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAMjD,UAAU,0BAA0BkD,GAAE,eAAAtC,OAAiB2B,IAA7D,eACArD,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAQnB,QA1BI,WAChBxE,EAAU4F,OAAO,CAACrE,WAAW,UAAUsE,IAAId,IAAKvD,KAAKH,EAAQI,KAAK,gBAClEqE,QAAQC,IAAI/F,IAwBsBgG,UAAQ,GAAtC,gCCTGC,EArBE,SAAA9D,GAA+B,IAA7B+D,EAA6B/D,EAA7B+D,OAAOlG,EAAsBmC,EAAtBnC,UAAUqB,EAAYc,EAAZd,QAC1B8E,EAAgBC,IAAEC,IAAIH,EAAS,SAACI,GAAD,OACjC5E,EAAAC,EAAAC,cAAC2E,EAAD7C,OAAAC,OAAA,CACItC,QAASA,EACTrB,UAAWA,EACXwG,IAAKF,EAAMvB,IACPuB,MAIZ,OACI5E,EAAAC,EAAAC,cAAA,WACIuE,ICQGM,EArBG,SAAAtE,GAA+BA,EAA7BuE,YAA6B,IAAhBC,EAAgBxE,EAAhBwE,aAE7B,OACIjF,EAAAC,EAAAC,cAAA,OAAKY,UAAY,QAEbd,EAAAC,EAAAC,cAAA,SACAY,UAAY,mCACZ6B,KAAK,SACLC,YAAY,2BACZJ,SAAYyC,MCFTC,EARA,SAACxF,GACZ,OACIM,EAAAC,EAAAC,cAAA,OAAKiF,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChE5F,EAAM6F,oBCObC,cACF,SAAAA,EAAY9F,GAAO,IAAAD,EAAA,OAAAuC,OAAAyD,EAAA,EAAAzD,CAAA1B,KAAAkF,IACf/F,EAAAuC,OAAA0D,EAAA,EAAA1D,CAAA1B,KAAA0B,OAAA2D,EAAA,EAAA3D,CAAAwD,GAAAI,KAAAtF,KAAMZ,KAMVmG,cAAe,aAPIpG,EAUnBqG,eAAiB,SAAAC,GACbtG,EAAKuG,SAAS,CAAEhB,YAAae,EAAME,OAAOxD,SAT1ChD,EAAKyG,MAAQ,CAETlB,YAAa,IAJFvF,wEAaV,IAAA0G,EAAA7F,KAAAd,EAEiCc,KAAKZ,MAAnC0G,EAFH5G,EAEG4G,QAAQ9H,EAFXkB,EAEWlB,UAAUqB,EAFrBH,EAEqBG,QACpB0G,EAAc3B,IAAEC,IAAIyB,EAAS,SAACE,GAAD,OAAAtE,OAAAuE,EAAA,EAAAvE,CAAA,CAChCL,KAAK2E,EAAOE,UAAWF,EAAOG,UAC1BH,KAEDI,EAAgBhC,IAAEiC,OAAON,EAAa,SAACzB,GAAD,OAAWF,IAAEkC,QAAQhC,EAAMjD,MAClEkF,SAASnC,IAAEkC,QAAQT,EAAKD,MAAMlB,gBACnC,OAAGoB,EAEKpG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIY,UAAU,MAAd,iBACAd,EAAAC,EAAAC,cAAC4G,EAAD,CAAW7B,aAAc3E,KAAKwF,iBAC9B9F,EAAAC,EAAAC,cAAC6G,EAAD,KAEI/G,EAAAC,EAAAC,cAAC8G,EAAD,CAAUrH,QAASA,EAASrB,UAAWA,EAAWkG,OAAQkC,MAK9D1G,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAQC,QAAM,EAAErD,KAAK,SAArB,IAA8B7D,EAAAC,EAAAC,cAAA,mCAnCvBgD,aA6CZ1E,cACX2E,2BAAiB,CAAC,CAAEtD,WAAY,aAChCsH,kBAAQ,SAACjB,EAAOxG,GAAR,MAAmB,CACvB0G,QAASF,EAAM5H,UAAU8I,QAAQhB,WAH1B5H,CAKbgH,4FC7CW6B,UAAe,SAAA5G,GAAA,IACF8E,EADE9E,EACF8E,SACO+B,EAFL7G,EAEK6G,QACPC,EAHE9G,EAGF8G,cACAC,EAJE/G,EAIF+G,SACAC,EALEhH,EAKFgH,QACOC,EANLjH,EAMKiH,cANL,OASxB1H,EAAAC,EAAAC,cAACyH,EAAA,EAAQC,SAAT,KACI5H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CACIE,GAAIC,IACJC,UAAU,UACVC,KAAK,UACLC,UAAQ,EACRC,UAAU,QACVC,UAAQ,EACRV,QAASA,GAGLzH,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CAAYtF,QAAS0E,EAAUK,GAAIQ,IAASrE,GAAG,SAA/C,QAGAhE,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CACItF,QAAS0E,EACTxD,GAAG,eACH6D,GAAIQ,KAHR,gBAMArI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CACItF,QAAS0E,EACTK,GAAIQ,IACJrE,GAAG,eAHP,eAQAsD,EAAWtH,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CACPtF,QAAU,WACN4E,IACAF,KAEJxD,GAAG,QACH6D,GAAIQ,KANG,WASPrI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CACAtF,QAAS0E,EACTxD,GAAG,SACH6D,GAAIQ,KAHJ,SAQJrI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CAEItF,QAAS0E,EACTxD,GAAG,UACH6D,GAAIQ,KAJR,YASRrI,EAAAC,EAAAC,cAACyH,EAAA,EAAQW,OAAT,CACIC,OAAQd,EACR3E,QAASyE,EACTiB,MAAM,MACNrD,MAAO,CAAEsD,UAAW,UAEpBzI,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAMU,MAAM,MAAMP,UAAQ,GACtBjI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,KACIpI,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOuC,KAAK,OAAOpC,IAAKmD,OAE5B5E,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,CAAWM,SAAS,QAAQ5F,QAAS0E,GACjCxH,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAMhH,KAAK,cAIlB4D,eCjFAqD,GAAiB,SAAAnI,GAAA,IAAG8E,EAAH9E,EAAG8E,SAAH,OAC1BvF,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,CAAW1D,MAAO,CAAE2D,UAAW,QAAUvD,IC6B9BwD,GA1BO,SAAAtI,GAAA,IAAEiH,EAAFjH,EAAEiH,cAAcJ,EAAhB7G,EAAgB6G,QAAhB,OAClBtH,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAMU,MAAM,MAAMP,UAAQ,GACtBjI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKM,KAAN,KACIpI,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOuC,KAAK,OAAOpC,IAAKmD,OAE5B5E,EAAAC,EAAAC,cAAC4H,EAAA,EAAK7G,OAAN,KACIjB,EAAAC,EAAAC,cAAA,MAAIY,UAAU,MAAd,kBAEJd,EAAAC,EAAAC,cAAC4H,EAAA,EAAKA,KAAN,CAAWY,SAAS,SAChB1I,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,+DACbkD,GAAG,SADT,QAEAhE,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,+DACbkD,GAAG,gBADT,gBAEAhE,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,+DACbkD,GAAG,eADT,eAEEsD,EAAQtH,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,8DACbgC,QAAS4E,EACT1D,GAAG,SAFT,WAEsChE,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,8DAChDkD,GAAG,UAD0B,SAGhDhE,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAASvH,UAAU,+DACbkD,GAAG,YADT,cCfNgF,8MACF9C,MAAQ,CACJuB,SAAS,EACTwB,iBAAgB,KAYpBC,aAAe,WACSzJ,EAAKyG,MAAjBuB,SAEKhI,EAAKuG,SAAS,CAAEyB,SAAS,OAE9CC,cAAgB,WACSjI,EAAKC,MAAlB7B,SACCsL,YAGTC,aAAe,kBAAM3J,EAAKuG,SAAS,CAAEyB,SAAUhI,EAAKyG,MAAMuB,mFACjD,IACGlC,EAAajF,KAAKZ,MAAlB6F,SADH8D,EAE+B/I,KAAK4F,MAAjCuB,EAFH4B,EAEG5B,QAAQwB,EAFXI,EAEWJ,gBAChB,OAEIjJ,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACC,EAAA,EAAeA,IAAWmJ,WACvBtJ,EAAAC,EAAAC,cAACqJ,EAAD,CAEIhC,cAAejH,KAAK4I,aACpB1B,SAAUlH,KAAK8I,aACf9B,QAAS2B,EACTvB,cAAepH,KAAKoH,cACpBD,QAASA,GAETzH,EAAAC,EAAAC,cAACsJ,GAAD,KAAiBjE,KAGzBvF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYsJ,SAAUtJ,IAAWuJ,WAAWD,UACxCzJ,EAAAC,EAAAC,cAACyJ,GAAD,CACIrC,QAAS2B,EACTvB,cAAepH,KAAKoH,gBAExB1H,EAAAC,EAAAC,cAACsJ,GAAD,KAAiBjE,wDA5CL7F,EAAMwG,GAGlC,OADiBxG,EAATkK,KACAC,IACG,CAAEZ,iBAAgB,GAElB,CAAEA,iBAAgB,UAZZ/F,aA+DN4G,eAAWtL,YACtBuL,4BACA5C,kBAAQ,SAACjB,EAAMxG,GAAP,MAAkB,CACtBkK,KAAK1D,EAAMrI,SAAS+L,QAHFpL,CAIjBwK,KC3EMgB,oLAVP,OACIhK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCAJMgD,aCOhB+G,eACF,SAAAA,EAAYvK,GAAO,IAAAD,EAAA,OAAAuC,OAAAyD,EAAA,EAAAzD,CAAA1B,KAAA2J,IACfxK,EAAAuC,OAAA0D,EAAA,EAAA1D,CAAA1B,KAAA0B,OAAA2D,EAAA,EAAA3D,CAAAiI,GAAArE,KAAAtF,KAAMZ,KAGVL,SAAW,SAAAC,GACP,IAAM4K,EAAe5K,EADJE,EAEqBC,EAAKC,MAAnCpB,EAFSkB,EAETlB,UAAWgI,EAFF9G,EAEE8G,OAAQ3G,EAFVH,EAEUG,QAC3BrB,EAAU6L,OAAO,CAACtK,WAAW,UAAUsE,IAAImC,EAAOjD,IAAI6G,GAAcpK,KAAKH,EAAQI,KAAK,iBALtFN,EAAKyG,MAAQ,GAFEzG,wEAUV,IACE6G,EAAYhG,KAAKZ,MAAjB4G,OACP,OAAGA,EAEKtG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAEIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIhB,SAAUiB,KAAKjB,SACfkB,cAAe,CACXa,QAAQkF,EAAOlF,QACfoF,UAAUF,EAAOE,UACjBC,SAASH,EAAOG,SAChBnD,MAAMgD,EAAOhD,MACbC,MAAM+C,EAAO/C,OAEjB/C,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,KAAMC,EAAvBH,EAAuBG,WAAYC,EAAnCJ,EAAmCI,SAAUvB,EAA7CmB,EAA6CnB,OAA7C,OACJU,EAAAC,EAAAC,cAAA,QAAMY,UAAU,UAAUzB,SAAUqB,GAChCV,EAAAC,EAAAC,cAAA,OAAKY,UAAU,UACXd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,kBACXd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,OAAK,GACPhB,EAAAC,EAAAC,cAACa,EAAA,EAAKE,OAAN,KACIjB,EAAAC,EAAAC,cAAA,6BAEJF,EAAAC,EAAAC,cAACa,EAAA,EAAKG,QAAN,UAEyBC,GAAjB7B,EAAO8B,QAAqBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaL,OAAK,GAAlB,IAAoBhB,EAAAC,EAAAC,cAACmB,EAAA,EAAYC,MAAb,CAAmBC,aAAW,IAAlD,KAAqEvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,SAASC,IAAG,wBAAAC,OAA0BpC,EAAO8B,QAAjC,iBAMtIpB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,mBACXd,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOsB,KAAK,WACP,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAHD,EAAUE,KAAV,OAEG9B,EAAAC,EAAAC,cAAC6B,EAAA,OAADC,OAAAC,OAAA,GACQJ,EADR,CAGIK,MAAM,MACNC,SAAU,CACNC,MAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNC,SAAS,SAAAC,GAAUZ,EAAMW,SAASC,UAQlDzC,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,YACLe,UAAU,QACVC,KAAK,OACLC,YAAY,eAGhB5C,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,WACLe,UAAU,QACVC,KAAK,OACLC,YAAY,cAGhB5C,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,QACLe,UAAU,QACVC,KAAK,OACLC,YAAY,gBAIxB5C,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SACXd,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,QACLe,UAAU,WACVE,YAAY,WAGpB5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQY,UAAU,2BAA2B6B,KAAK,SAASE,SAAUjC,GAAcC,GAAnF,UAGAb,EAAAC,EAAAC,cAAA,UACIY,UAAU,4BACVgC,QAASnC,EAAKoC,MACdF,SAAUjC,GAAcC,GAH5B,UAQJb,EAAAC,EAAAC,cAAA,WAAM8C,KAAKC,UAAU3D,EAAQ,EAAG,UASpDU,EAAAC,EAAAC,cAAA,uBAxHQgD,aAoIT1E,eACX2E,2BAAkB,SAAAzD,GAAK,MAAG,CACtB,CAACG,WAAW,UAAUuK,QAAQ,SAASjG,IAAIzE,EAAM2K,MAAMC,OAAOjH,OAElE8D,kBAAQ,SAAAoD,EAAwB7K,GAAxB,IAAa0H,EAAbmD,EAAEjM,UAAW8I,QAAb,MAAmC,CACvCd,OAAQc,EAAQd,QAAUc,EAAQd,OAAO,MALlC9H,CAObyL,IC5IIO,8MAGFnL,SAAW,SAAAoB,GAAsB,IAApB6C,EAAoB7C,EAApB6C,MAAMmH,EAAchK,EAAdgK,SAAcjL,EAEDC,EAAKC,MAAzB7B,EAFqB2B,EAErB3B,SAAS8B,EAFYH,EAEZG,QACjB9B,EAAS6M,MAAM,CAACpH,QAAMmH,aAAW3K,KAAKH,EAAQI,KAAK,yFAGnD,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIhB,SAAUiB,KAAKjB,SACfkB,cAAe,GAGfC,OAAQ,SAAAoB,GAAA,IAAGlB,EAAHkB,EAAGlB,aAAoBE,GAAvBgB,EAAiBjB,KAAjBiB,EAAuBhB,YAAYC,EAAnCe,EAAmCf,SAAUvB,EAA7CsC,EAA6CtC,OAA7C,OACJU,EAAAC,EAAAC,cAAA,QAAMY,UAAU,UAAUzB,SAAUqB,GAG5BV,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WACXd,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsB,KAAK,QACLe,UAAU,QACVC,KAAK,QACLC,YAAY,WAIxB5C,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SACXd,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIsC,KAAK,WACLhB,KAAK,WACLiB,YAAY,YAEX,SAAA2H,GAAA,IAAE1I,EAAF0I,EAAE1I,MAAF0I,EAAQzI,KAAR,OACG9B,EAAAC,EAAAC,cAAA,QAAA8B,OAAAC,OAAA,CAAOU,KAAK,YAAed,OAMvC7B,EAAAC,EAAAC,cAAA,UAAQY,UAAU,2BAA2B6B,KAAK,SAASE,SAAUjC,GAAcC,GAAnF,SAGAb,EAAAC,EAAAC,cAAA,WAAM8C,KAAKC,UAAU3D,EAAQ,EAAG,iBAhD5C4D,aA8DL6G,+BAAkBS,mCC/D3BG,GAAiBC,KAAsB,IAEhCC,GAAsBC,mCAAwB,CACvDC,mBAAoB,sBACpBC,wBAAyB/D,IACzBgE,mBAAmB,EACnBC,aAAc,SAAChF,EAAOiF,GAAR,OACVR,GAAeS,sBAAsBD,IAAa,UACtDE,uBAAwB,SAAA5K,GAAA,IAAA6K,EAAA7K,EAAG5C,SAAY+L,EAAf0B,EAAe1B,KAAe2B,GAA9BD,EAAqBE,QAArBF,EAA8BC,gBAA9B,OACnB3B,EAAK6B,WAA+B,IAAnBF,GACtBG,sBAAuB,SAAA9J,GAAA,IAAegI,EAAfhI,EAAG/D,SAAY+L,KAAf,OACnBA,EAAK6B,WAAa7B,EAAK+B,WAGlBC,GAAyBd,mCAAwB,CAC1DC,mBAAoB,yBACpBC,wBAAyB/D,IACzBgE,mBAAmB,EACnBC,aAAc,SAAChF,EAAOiF,GAAR,OACVR,GAAeS,sBAAsBD,IAAa,KACtDE,uBAAwB,SAAAd,GAAA,IAAAsB,EAAAtB,EAAG1M,SAAY+L,EAAfiC,EAAejC,KAAM2B,EAArBM,EAAqBN,eAArB,OACnB3B,EAAK6B,WAA+B,IAAnBF,GACtBG,sBAAuB,SAAAI,GAAA,IAAelC,EAAfkC,EAAGjO,SAAY+L,KAAf,OACnBA,EAAK6B,UAAY7B,EAAK+B,WCsBdI,eAxCd,SAAAA,EAAYrM,GAAO,IAAAD,EAAA,OAAAuC,OAAAyD,EAAA,EAAAzD,CAAA1B,KAAAyL,IACjBtM,EAAAuC,OAAA0D,EAAA,EAAA1D,CAAA1B,KAAA0B,OAAA2D,EAAA,EAAA3D,CAAA+J,GAAAnG,KAAAtF,KAAMZ,KACDwG,MAAQ,GAFIzG,wEAajB,OAEEO,EAAAC,EAAAC,cAAC8L,EAAA,SAAD,CAAUzN,MAAOA,GACbyB,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,KACFjM,EAAAC,EAAAC,cAAA,OAAKY,UAAU,MACXd,EAAAC,EAAAC,cAACgM,GAAD,KACAlM,EAAAC,EAAAC,cAACiM,EAAA,EAAD,KACInM,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQ5J,UAAWsH,KACrChK,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAe5J,UAAWmI,GAAoBzL,KAChEY,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAc5J,UAAWmI,GAAoBrF,KAC/DxF,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkB5J,UAAWmI,GAAoBZ,MACnEjK,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAAS5J,UAAWkJ,GAAuBpB,MAC7DxK,EAAAC,EAAAC,cAACkM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAU5J,UAAW8C,gBA1BrCtC,aCAEqJ,QACW,cAA7BrN,OAAOsN,SAASC,UAEe,UAA7BvN,OAAOsN,SAASC,UAEhBvN,OAAOsN,SAASC,SAASpC,MACvB,kECTNqC,IAASlM,OAAOR,EAAAC,EAAAC,cAACyM,GAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlN,KAAK,SAAAmN,GACjCA,EAAaC","file":"static/js/main.65c16da6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.388b052a.png\";","import { createStore, combineReducers, compose } from 'redux';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase';\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore';\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC6rHHcP2S1RHoKZG8dZrcFIRX_T7Q4klY\",\n    authDomain: \"robot-friend-b4cd3.firebaseapp.com\",\n    databaseURL: \"https://robot-friend-b4cd3.firebaseio.com\",\n    projectId: \"robot-friend-b4cd3\",\n    storageBucket: \"robot-friend-b4cd3.appspot.com\",\n    messagingSenderId: \"202082833271\",\n    appId: \"1:202082833271:web:c1402d43dbc35061\"\n};\n\n// react-redux-firebase config\nconst rrfConfig = {\n    userProfile: 'users',\n    useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n};\n\n// Init firebase instance\nfirebase.initializeApp(firebaseConfig);\n// Init firestore\nconst firestore = firebase.firestore();\n\n\n// Add reactReduxFirebase enhancer when making store creator\nconst createStoreWithFirebase = compose(\n    reactReduxFirebase(firebase, rrfConfig), // firebase instance as first argument\n    reduxFirestore(firebase)\n)(createStore);\n\nconst rootReducer = combineReducers({\n    firebase: firebaseReducer,\n    firestore: firestoreReducer,\n    // notify: notifyReducer,\n    // settings: settingsReducer\n});\n\n// Check for settings in localStorage\n// if (localStorage.getItem('settings') == null) {\n//     // Default settings\n//     const defaultSettings = {\n//         disableBalanceOnAdd: true,\n//         disableBalanceOnEdit: false,\n//         allowRegistration: false\n//     };\n//\n//     // Set to localStorage\n//     localStorage.setItem('settings', JSON.stringify(defaultSettings));\n// }\n\n// Create initial state\nconst initialState = {};\n\n// Create store\nconst store = createStoreWithFirebase(\n     rootReducer,\n    initialState,\n    compose(\n        reactReduxFirebase(firebase),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Responsive, Segment ,Card, Placeholder } from \"semantic-ui-react\";\nimport { Form, Field, } from \"react-final-form\";\nimport {firestoreConnect} from \"react-redux-firebase\";\nimport { Slider } from 'react-semantic-ui-range'\nclass CreateRobot extends Component {\n\n    onSubmit = values => {\n        const newRobot = values;\n        const { firestore,history } =this.props;\n        firestore.add({collection:'clients'},newRobot).then(history.push('/viewRobots'));\n    };\n  render() {\n    return (\n      <Responsive>\n        <Segment>\n\n          <Form\n            onSubmit={this.onSubmit}\n            initialValues={{}}\n            render={({ handleSubmit, form, submitting, pristine, values }) => (\n              <form className=\"ui form\" onSubmit={handleSubmit}>\n                <div className=\"fields\">\n                    <div className=\"six wide field\">\n                        <Card fluid>\n                            <Card.Header>\n                                <label>Robot image</label>\n                            </Card.Header>\n                            <Card.Content>\n\n                                    {\n                                        values.robotId ==undefined ?<Placeholder fluid> <Placeholder.Image rectangular /> </Placeholder>:<img alt='robots' src={`https://robohash.org/${values.robotId}?200*200`}/>\n                                    }\n\n\n\n                            </Card.Content>\n                        </Card>\n                    </div>\n                  <div className=\" ten wide field\">\n                      <label>Angriness</label>\n\n                      <Field name=\"robotId\" >\n                          {({ input, meta }) =>(\n\n                                  <Slider\n                                          {...input}\n\n                                          color=\"red\"\n                                          settings={{\n                                              start: 2,\n                                              min: 0,\n                                              max: 100,\n                                              step: 1,\n                                              onChange:value =>{ input.onChange(value)}\n                                          }}\n                                  />\n\n\n                          ) }\n                      </Field>\n\n                    <label>First Name</label>\n                    <Field\n                      name=\"firstName\"\n                      component=\"input\"\n                      type=\"text\"\n                      placeholder=\"First Name\"\n                    />\n\n                    <label>Last Name</label>\n                    <Field\n                      name=\"lastName\"\n                      component=\"input\"\n                      type=\"text\"\n                      placeholder=\"Last Name\"\n                    />\n\n                      <label>Email</label>\n                      <Field\n                          name=\"email\"\n                          component=\"input\"\n                          type=\"text\"\n                          placeholder=\"Last Name\"\n                      />\n                  </div>\n                </div>\n\n\n\n                <div className=\"field\">\n                  <label>Notes</label>\n                  <Field\n                    name=\"notes\"\n                    component=\"textarea\"\n                    placeholder=\"Notes\"\n                  />\n                </div>\n                <div >\n                  <button className='ui primary basic button ' type=\"submit\" disabled={submitting || pristine}>\n                    Submit\n                  </button>\n                  <button\n                      className='ui secondary basic button'\n                    onClick={form.reset}\n                    disabled={submitting || pristine}\n                  >\n                    Reset\n                  </button>\n                </div>\n                <pre>{JSON.stringify(values, 0, 2)}</pre>\n              </form>\n            )}\n          />\n        </Segment>\n      </Responsive>\n    );\n  }\n}\n\nCreateRobot.propTypes = {\n    firestore:PropTypes.object.isRequired,\n};\n\nexport default firestoreConnect()(CreateRobot) ;\n","import React,{useState} from 'react';\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\nconst Card = ({robotId , id , name ,email, notes, firestore,history}) =>{\n\n    if(robotId == undefined){\n        robotId = id\n    }\n    const deleteRobot = ()=>{\n        firestore.delete({collection:'clients',doc:id}).then(history.push('/viewRobots'))\n        console.log(firestore)\n    };\n    return(\n\n        <Modal\n            closeIcon\n            trigger={\n            <div className='bg-light-green dib br3 pa3 ma2 grow tc bw2 shadow-5'>\n                 <img alt='robots' src={`https://robohash.org/${robotId}?100*100`}/>\n                   <div>\n                       <h2>{name}</h2>\n                        <p>{email}</p>\n                       <p>{notes}</p>\n                   </div>\n            </div>}>\n<Modal.Header>Robot Details</Modal.Header>\n    <Modal.Content image>\n        <Image wrapped size='medium' src={`https://robohash.org/${robotId}?100*100`} />\n        <Modal.Description>\n            <Header>{name}</Header>\n            <p>We've found the following gravatar image associated with your e-mail address.</p>\n            <p>Is it okay to use this photo?</p>\n            <p>{notes}</p>\n            <Link className='ui button basic primary' to={`/robot/edit/${id}`}> Edit Robot</Link>\n            <Button onClick={deleteRobot} negative> Delete</Button>\n        </Modal.Description>\n    </Modal.Content>\n    </Modal>\n    )\n};\nexport default Card;","import React from 'react';\nimport Card from '../Card/card';\nimport _ from 'lodash'\n\nconst CardList = ({robots,firestore,history}) =>{\n    const cardComponent = _.map(robots , (robot) =>(\n        <Card\n            history={history}\n            firestore={firestore}\n            key={robot.id}\n            {...robot}\n        />\n    ) );\n\n    return (\n        <div>\n           {cardComponent}\n        </div>\n    )\n};\n\n\n\n\n\nexport default CardList;","import React from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst SearchBox = ({searchfield, searchChange})=>{\n\n    return(\n        <div className = 'pa2 '>\n\n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='Search for Robot friends'\n            onChange = {searchChange}\n            />\n        </div>    \n    )\n}\n\n\n\n\n\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport CardList from \"../../components/CardList\";\nimport SearchBox from \"../../components/SearchBox\";\nimport {compose} from \"redux\";\nimport {firestoreConnect} from \"react-redux-firebase\";\nimport {connect} from \"react-redux\";\nimport _ from 'lodash';\nimport Scroll from '../../components/Scroll';\nimport {\n    Loader\n} from \"semantic-ui-react\";\nclass DisplayRobot extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            searchfield: \"\"\n        };\n    }\n    onDeleteRobot =() =>{\n\n    }\n    onSearchChange = event => {\n        this.setState({ searchfield: event.target.value });\n    };\n    render() {\n\n        const { clients,firestore,history } = this.props;\n        const clientNames = _.map(clients, (client)=>({\n           name:client.firstName +client.lastName,\n            ...client\n        }));\n        const filteredRobots =_.filter(clientNames, (robot)=>( _.toLower(robot.name)\n            .includes(_.toLower(this.state.searchfield))));\n        if(clients){\n            return (\n                <div>\n                    <h1 className='f1'>Robot Friends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n\n                        <CardList history={history} firestore={firestore} robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            )\n        }else {\n            return( <Loader active  size='large'> <h3 >Making robots</h3></Loader>)\n        }\n\n    }\n}\n\nDisplayRobot.propTypes = {\n    clients:PropTypes.array,\n};\n\nexport default compose(\n    firestoreConnect([{ collection: \"clients\" }]),\n    connect((state, props) => ({\n        clients: state.firestore.ordered.clients,\n    }))\n)(DisplayRobot);\n","import _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { NavLink } from 'react-router-dom'\nimport robot from './robot.png'\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Sticky,\n    Responsive\n} from \"semantic-ui-react\";\nimport './NavBar.css'\n\n\nexport const NavBarMobile = ({\n                          children,\n                                 isLogin,\n                          onPusherClick,\n                          onToggle,\n                          visible,\n                                 onLogoutClick\n                      }) => (\n\n    <Sidebar.Pushable>\n        <Sidebar\n            as={Menu}\n            animation=\"overlay\"\n            icon=\"labeled\"\n            inverted\n            direction='right'\n            vertical\n            visible={visible}\n        >\n\n                <Menu.Item  onClick={onToggle} as={NavLink} to='/home' >\n                    Home\n                </Menu.Item>\n                <Menu.Item\n                    onClick={onToggle}\n                    to=\"/createRobot\"\n                    as={NavLink} >\n                    Create Robot\n                </Menu.Item>\n                <Menu.Item\n                    onClick={onToggle }\n                    as={NavLink}\n                    to=\"/viewRobots\"\n                >\n                    View Robots\n                </Menu.Item>\n            {\n                isLogin ?  <Menu.Item\n                    onClick={ () => {\n                        onLogoutClick();\n                        onToggle();\n                    }}\n                    to=\"/home\"\n                    as={NavLink}>\n                    Log out\n                </Menu.Item>   :\n                    <Menu.Item\n                    onClick={onToggle}\n                    to=\"/login\"\n                    as={NavLink}>\n                    Login\n                </Menu.Item>\n            }\n\n                <Menu.Item\n\n                    onClick={onToggle}\n                    to=\"/signUp\"\n                    as={NavLink}>\n                    Sign up\n                </Menu.Item>\n\n        </Sidebar>\n        <Sidebar.Pusher\n            dimmed={visible}\n            onClick={onPusherClick}\n            fixed=\"top\"\n            style={{ minHeight: \"100vh\" }}\n        >\n            <Menu fixed=\"top\" inverted >\n                <Menu.Item>\n                    <Image size=\"mini\" src={robot} />\n                </Menu.Item >\n                <Menu.Item position=\"right\" onClick={onToggle}>\n                    <Icon name=\"sidebar\" />\n                </Menu.Item>\n\n            </Menu>\n            {children}\n        </Sidebar.Pusher>\n    </Sidebar.Pushable>\n\n);\n\n\n","\nimport _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport {Link } from 'react-router-dom';\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n} from \"semantic-ui-react\";\n\nexport const NavBarChildren = ({ children }) => (\n    <Container style={{ marginTop: \"5em\" }}>{children}</Container>\n);","\nimport _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport robot from './robot.png'\n\nimport { NavLink } from 'react-router-dom'\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive,\n    Button\n} from \"semantic-ui-react\";\n\n\nconst NavBarDesktop = ({onLogoutClick,isLogin}) => (\n    <Menu fixed=\"top\" inverted>\n        <Menu.Item>\n            <Image size=\"mini\" src={robot} />\n        </Menu.Item>\n        <Menu.Header>\n            <h1 className='f1'>Robot Friends</h1>\n        </Menu.Header>\n        <Menu.Menu position=\"right\">\n            <NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l \"\n                  to=\"/home\" >Home</NavLink>\n            <NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l \"\n                  to=\"/createRobot\" >Create Robot</NavLink>\n            <NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l \"\n                  to=\"/viewRobots\" >View Robots</NavLink>\n            { isLogin?<NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l\"\n                            onClick={onLogoutClick}\n                            to=\"/home\" >Log out</NavLink>  :<NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l\"\n                               to=\"/login\" >Login</NavLink>}\n\n            <NavLink className=\"f6 f5-l link bg-animate  hover-bg-light-green dib pa3 ph4-l \"\n                  to=\"/signUp \" >Sign up</NavLink>\n\n        </Menu.Menu>\n    </Menu>\n);\nexport default NavBarDesktop;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport CreateRobot from '../../../containers/CreateRobot';\nimport {compose} from \"redux\";\nimport {firestoreConnect} from \"react-redux-firebase\";\nimport { withRouter } from 'react-router-dom'\nimport { firebaseConnect } from 'react-redux-firebase'\nimport {connect} from \"react-redux\";\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n} from \"semantic-ui-react\";\nimport {NavBarMobile} from './NavBarMoblie'\nimport {NavBarChildren} from './NavBarChildren'\nimport NavBarDesktop from './NavBarDesktop'\n\n\n\nclass NavBar extends Component {\n    state = {\n        visible: false,\n        isAuthenticated:false,\n    };\n\nstatic getDerivedStateFromProps(props,state){\n\n    const { auth } = props;\n    if(auth.uid){\n        return { isAuthenticated:true}\n    }else {\n        return { isAuthenticated:false}\n    }\n}\n    handlePusher = () => {\n        const { visible } = this.state;\n\n        if (visible) this.setState({ visible: false });\n    };\nonLogoutClick = () => {\n    const { firebase } = this.props;\n    firebase.logout();\n};\n\n    handleToggle = () => this.setState({ visible: !this.state.visible });\n    render() {\n        const { children } = this.props;\n        const { visible,isAuthenticated } = this.state;\n        return (\n\n            <div>\n\n                <Responsive {...Responsive.onlyMobile}>\n                    <NavBarMobile\n\n                        onPusherClick={this.handlePusher}\n                        onToggle={this.handleToggle}\n                        isLogin={isAuthenticated}\n                        onLogoutClick={this.onLogoutClick}\n                        visible={visible}\n                    >\n                        <NavBarChildren>{children}</NavBarChildren>\n                    </NavBarMobile>\n                </Responsive>\n                <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n                    <NavBarDesktop\n                        isLogin={isAuthenticated}\n                        onLogoutClick={this.onLogoutClick}\n                    />\n                    <NavBarChildren>{children}</NavBarChildren>\n                </Responsive>\n\n            </div>\n        );\n    }\n}\n\n// NavBar.propTypes = {\n//     firebase:PropTypes.object.isRequired,\n//     auth:PropTypes.object.isRequired,\n// };\n//\nexport default withRouter(compose(\n    firebaseConnect(),\n    connect((state,props) => ({\n        auth:state.firebase.auth,\n    })))(NavBar));\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Landing extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Landing page</h1>\n            </div>\n        );\n    }\n}\n\nLanding.propTypes = {};\n\nexport default Landing;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from \"redux\";\nimport {firestoreConnect} from \"react-redux-firebase\";\nimport {connect} from \"react-redux\";\n\nimport {Card, Placeholder, Responsive, Segment} from \"semantic-ui-react\";\nimport {Field, Form} from \"react-final-form\";\nimport {Slider} from \"react-semantic-ui-range\";\n\nclass editRobot extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    onSubmit = values => {\n        const updatedRobot = values;\n        const { firestore, client, history } =this.props;\n        firestore.update({collection:'clients',doc:client.id},updatedRobot).then(history.push('/viewRobots'));\n    };\n\n    render() {\n        const {client  } = this.props;\n        if(client){\n            return (\n                <Responsive>\n                    <Segment>\n\n                        <Form\n                            onSubmit={this.onSubmit}\n                            initialValues={{\n                                robotId:client.robotId,\n                                firstName:client.firstName,\n                                lastName:client.lastName,\n                                email:client.email,\n                                notes:client.notes\n                            }}\n                            render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                <form className=\"ui form\" onSubmit={handleSubmit}>\n                                    <div className=\"fields\">\n                                        <div className=\"six wide field\">\n                                            <Card fluid>\n                                                <Card.Header>\n                                                    <label>Robot image</label>\n                                                </Card.Header>\n                                                <Card.Content>\n                                                    {\n                                                        values.robotId ==undefined ?<Placeholder fluid> <Placeholder.Image rectangular /> </Placeholder>:<img alt='robots' src={`https://robohash.org/${values.robotId}?200*200`}/>\n                                                    }\n\n                                                </Card.Content>\n                                            </Card>\n                                        </div>\n                                        <div className=\" ten wide field\">\n                                            <label>Angriness</label>\n\n                                            <Field name=\"robotId\" >\n                                                {({ input, meta }) =>(\n\n                                                    <Slider\n                                                        {...input}\n\n                                                        color=\"red\"\n                                                        settings={{\n                                                            start: 2,\n                                                            min: 0,\n                                                            max: 100,\n                                                            step: 1,\n                                                            onChange:value =>{ input.onChange(value)}\n                                                        }}\n                                                    />\n\n\n                                                ) }\n                                            </Field>\n\n                                            <label>First Name</label>\n                                            <Field\n                                                name=\"firstName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                placeholder=\"First Name\"\n                                            />\n\n                                            <label>Last Name</label>\n                                            <Field\n                                                name=\"lastName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                placeholder=\"Last Name\"\n                                            />\n\n                                            <label>Email</label>\n                                            <Field\n                                                name=\"email\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                placeholder=\"Last Name\"\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label>Notes</label>\n                                        <Field\n                                            name=\"notes\"\n                                            component=\"textarea\"\n                                            placeholder=\"Notes\"\n                                        />\n                                    </div>\n                                    <div >\n                                        <button className='ui primary basic button ' type=\"submit\" disabled={submitting || pristine}>\n                                            Submit\n                                        </button>\n                                        <button\n                                            className='ui secondary basic button'\n                                            onClick={form.reset}\n                                            disabled={submitting || pristine}\n                                        >\n                                            Reset\n                                        </button>\n                                    </div>\n                                    <pre>{JSON.stringify(values, 0, 2)}</pre>\n                                </form>\n                            )}\n                        />\n                    </Segment>\n                </Responsive>\n            )\n        }else {\n            return (\n                <h1>hi</h1>\n            )\n        }\n\n    }\n}\n\neditRobot.propTypes = {\n    clients:PropTypes.array,\n    firestore:PropTypes.object.isRequired,\n};\n\nexport default compose(\n    firestoreConnect( props =>[\n        {collection:'clients',storeAs:'client',doc:props.match.params.id}\n    ]),\n    connect(({firestore:{ordered}}, props) => ({\n        client: ordered.client && ordered.client[0]\n    }))\n)(editRobot);","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from \"redux\";\nimport {firestoreConnect} from \"react-redux-firebase\";\nimport {connect} from \"react-redux\";\nimport { Form, Field, } from \"react-final-form\";\nimport { firebaseConnect } from 'react-redux-firebase'\nimport {Button, Card, Grid, Header, Image, Message, Placeholder, Responsive, Segment} from 'semantic-ui-react'\nimport {Slider} from \"react-semantic-ui-range\";\nclass Login extends Component {\n\n\n    onSubmit = ({email,password}) => {\n\n        const { firebase,history } =this.props;\n        firebase.login({email,password}).then(history.push('/viewRobots'))\n    };\n    render() {\n        return (\n            <Responsive>\n                <Segment>\n                    <Form\n                        onSubmit={this.onSubmit}\n                        initialValues={{\n\n                        }}\n                        render={({ handleSubmit, form, submitting, pristine, values }) => (\n                            <form className=\"ui form\" onSubmit={handleSubmit}>\n\n\n                                    <div className=\"  field\">\n                                        <label>Email</label>\n                                        <Field\n                                            name=\"email\"\n                                            component=\"input\"\n                                            type=\"email\"\n                                            placeholder=\"Email\"\n                                        />\n                                    </div>\n\n                                <div className=\"field\">\n                                    <label>Passwords</label>\n                                    <Field\n                                        type='password'\n                                        name=\"password\"\n                                        placeholder=\"Password\"\n                                    >\n                                        {({input,meta})=>(\n                                            <input type='password' {...input}/>\n                                            )\n                                        }\n                                    </Field>\n                                </div>\n\n                                <button className='ui primary basic button ' type=\"submit\" disabled={submitting || pristine}>\n                                    Login\n                                </button>\n                                <pre>{JSON.stringify(values, 0, 2)}</pre>\n                            </form>\n                        )}\n                    />\n                </Segment>\n            </Responsive>\n        );\n    }\n}\n\nLogin.propTypes = {\n    firebase:PropTypes.object.isRequired,\n};\n\nexport default firebaseConnect()(Login);\n","\n\nimport {Loader} from \"semantic-ui-react\";\n\nimport locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\n\n\nconst locationHelper = locationHelperBuilder({});\n\nexport const UserIsAuthenticated = connectedRouterRedirect({\n    wrapperDisplayName: 'UserIsAuthenticated',\n    AuthenticatingComponent: Loader,\n    allowRedirectBack: true,\n    redirectPath: (state, ownProps) =>\n        locationHelper.getRedirectQueryParam(ownProps) || '/login',\n    authenticatingSelector: ({ firebase: { auth, profile, isInitializing } }) =>\n        !auth.isLoaded || isInitializing === true,\n    authenticatedSelector: ({ firebase: { auth } }) =>\n        auth.isLoaded && !auth.isEmpty\n});\n\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n    wrapperDisplayName: 'UserIsNotAuthenticated',\n    AuthenticatingComponent: Loader,\n    allowRedirectBack: false,\n    redirectPath: (state, ownProps) =>\n        locationHelper.getRedirectQueryParam(ownProps) || '/',\n    authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n        !auth.isLoaded || isInitializing === true,\n    authenticatedSelector: ({ firebase: { auth } }) =>\n        auth.isLoaded && auth.isEmpty\n});","import React, { Component } from \"react\";\nimport './App.css'\nimport store from \"../../store\";\nimport { Provider } from \"react-redux\";\nimport CreateRobot from '../CreateRobot'\nimport DisplayRobot from '../DisplayRobot/index'\nimport {BrowserRouter as Router , Switch,Route} from \"react-router-dom\";\nimport NavBar from '../../components/layout/NavBar/index'\nimport Landing from '../Landing'\nimport editRobot from '../editRobot'\nimport Login from '../../components/auth/Login/Login'\nimport { UserIsAuthenticated ,UserIsNotAuthenticated } from '../../helpers/auth'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n  // use arrow function to create a scope so that \"this\" refers to App object.\n  //Otherwise it points to event,which does not have this.state\n\n  render() {\n\n\n\n    return (\n\n      <Provider store={store}>\n          <Router>\n        <div className=\"tc\">\n            <NavBar>\n            <Switch>\n                <Route exact path='/home' component={Landing} />\n                <Route exact path='/createRobot' component={UserIsAuthenticated(CreateRobot)} />\n                <Route exact path='/viewRobots' component={UserIsAuthenticated(DisplayRobot)} />\n                <Route exact path='/robot/edit/:id' component={UserIsAuthenticated(editRobot)} />\n                <Route exact path='/login' component={UserIsNotAuthenticated(Login)} />\n                <Route exact path='/signUp' component={DisplayRobot} />\n\n            </Switch>\n\n            </NavBar>\n        </div>\n          </Router>\n      </Provider>\n\n    );\n  }\n}\n\n\n\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}