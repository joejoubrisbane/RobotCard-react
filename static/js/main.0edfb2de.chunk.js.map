{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_ref","onClickChange","react_default","a","createElement","className","onClick","alt","src","concat","id","name","email","Cardlist","robots","cardComponent","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","choosenId","state","console","log","_this2","fetch","then","response","json","_this3","filteredRobots","filter","toLocaleLowerCase","includes","length","src_SearchBox","src_Scroll","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,EAfF,SAACC,EAADC,GAA0B,IAAlBC,EAAkBD,EAAlBC,cAIjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDAAsDC,QAASL,GAC1EC,EAAAC,EAAAC,cAAA,OAAKG,IAAI,SAASC,IAAG,wBAAAC,OAA0BV,EAAMW,GAAhC,cACrBR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,EAAMY,MACXT,EAAAC,EAAAC,cAAA,SAAIL,EAAMa,UCaXC,EArBE,SAAAb,GAAa,IAAXc,EAAWd,EAAXc,OACTC,EAAgBD,EAAOE,IAAI,SAACC,EAAKC,GACnC,OAAQhB,EAAAC,EAAAC,cAACe,EAAD,CACJC,IAAKF,EACLR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAQE,EAAOI,GAAGN,UAI1B,OACIV,EAAAC,EAAAC,cAAA,WACIW,ICQGM,EApBG,SAAArB,GAA+BA,EAA7BsB,YAA6B,IAAhBC,EAAgBvB,EAAhBuB,aAE7B,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACbH,EAAAC,EAAAC,cAAA,SACAC,UAAY,mCACZmB,KAAK,SACLC,YAAY,2BACZC,SAAYH,MCGTI,SAZA,SAAC5B,GACZ,OACIG,EAAAC,EAAAC,cAAA,OAAKwB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DhC,EAAMiC,YC2DAC,cAzDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAuBJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAzBhCX,EA4BdjC,cAAgB,WACZiC,EAAKS,SAAS,CAACG,UAAUZ,EAAKa,MAAMjC,OAAOJ,KAC3CsC,QAAQC,IAAIf,EAAKa,MAAMD,YA5BvBZ,EAAKa,MAAQ,CACTjC,OAAQ,GACRQ,YAAa,GACbwB,UAAU,IALJZ,mFASM,IAAAgB,EAAAb,KAChBc,MAAM,8CAA8CC,KAAK,SAAAC,GAGrD,OAAOA,EAASC,SAEfF,KAAK,SAAAnC,GACFiC,EAAKP,SAAS,CAAE7B,OAAQG,uCAiB3B,IAAAsC,EAAAlB,KACCmB,EAAiBnB,KAAKU,MAAMjC,OAAO2C,OAAO,SAAA3C,GAC5C,OAAOA,EAAOH,KAAK+C,oBAAoBC,SAASJ,EAAKR,MAAMzB,YAAYoC,uBAG3E,OAAiC,IAA7BrB,KAAKU,MAAMjC,OAAO8C,OACX1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,WAGHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACyD,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9BvC,EAAAC,EAAAC,cAAC0D,EAAD,KACI5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAUjD,OAAQ0C,aA/CxBQ,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.0edfb2de.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props,{onClickChange}) =>{\n    \n        \n    \n    return(\n        <div className='bg-light-green dib br3 pa3 ma2 grow tc bw2 shadow-5' onClick={onClickChange}  >\n            <img alt='robots' src={`https://robohash.org/${props.id}?200*200`}/>\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n          \n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from'./Card';\n\nconst Cardlist = ({robots}) =>{\n    const cardComponent = robots.map((user,i) =>{\n        return (<Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email ={robots[i].email} \n            \n        /> )\n    })\n    return (\n        <div>\n           {cardComponent}\n        </div>\n    )\n}\n\n\n\n\n\nexport default Cardlist;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange})=>{\n\n    return(\n        <div className = 'pa3  '> \n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='Search for Robot friends'\n            onChange = {searchChange}\n            />\n        </div>    \n    )\n}\n\n\n\n\n\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY:'scroll',border:'2px solid black',height:'500px'}}>\n        {props.children}\n        </div>\n    )\n};\n\n\n\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css'\nimport Scroll from './Scroll'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n            choosenId:''\n           \n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n            //go to the url and get the jason file\n            //transfer the jason file to jacascript object\n            return response.json();\n        })\n            .then(user => {\n                this.setState({ robots: user })\n                // we can name \"user\" as anything we want, the react the the element of arry as a robot, \n                // s\n            })\n\n    }\n    // use arrow function to create a scope so that \"this\" refers to App object. \n    //Otherwise it points to event,which does not have this.state \n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n\n    }\n    onClickChange = ()=>{\n        this.setState({choosenId:this.state.robots.id})\n        console.log(this.state.choosenId)\n    }\n    \n    render() {\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())\n        })\n      \n        if (this.state.robots.length === 0) {\n            return <h1 className='f1 tc'>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1' >RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n        };\n    }\n};\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}